use "__some_method" type methods for internal operations?
stubbing SomeClass.new is not great, consider having a method like create_some_class and stubbing that.
only allow stubs on existing methods. does this exist? if not write stubs_existing.
look into using state machines for things like Result.colour_detected? / colour_state
colour_state us currently a boolean value. consider ColourState, or it may be covered using a state machine.
enforce colour to be 4 values (rgba/cmyk)

*some tests use random number of iterations, whereas some only have 2.

detector.rb
-----------

*usage examples
private methods untested

new features
------------
Detector schedule
have colour_tolerance and non_colour_tolerance.
@axis could be a class, thus preventing passing strings / syms around.
method for traversing image - as_tree?
detect_all_boundaries
split_image method
recycle annotation mask on detect_nth_boundary, giving a full report of all runs.
image crop to coords
what should happen when detector bigger than image?
class method version of detect_boundary

detect_colour_test.rb
---------------------
*finish test_should_annotate_correctly

lib/image_traversal/image_traversal.rb
------------------------
this file just includes all the modules in the lib. find out convention.

test/unit/image_traversal/factories.rb
-------------------------------
build_run can only be called once per test because it stubs the 'new' method

lib/image_traversal/image/base.rb
--------------------------
create colour / color aliases

lib/image_traversal/boundary.rb
------------------------
whole thing untested

test/unit/image_traversal/behavioral/behavioral.rb
-------------------------------------------
run these tests again, swapping image library
these tests are only really for detect_boundary.rb so should be reorganised.
remove these 2 lines from all over this file
        img = img.rotate( -90 ) if @axis == :y
        img = img.invert( @axis ) if invert?
test_fuzz not implemented

test/unit/image_traversal/detect_boundary_test.rb
------------------------------------------
be able to run these tests with various detector options
is this really needed everywhere?
  detector.stubs( :detect_colour? )
these tests (if/if not) could be combined
